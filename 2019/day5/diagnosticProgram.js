const input = [
  3,
  225,
  1,
  225,
  6,
  6,
  1100,
  1,
  238,
  225,
  104,
  0,
  1002,
  114,
  46,
  224,
  1001,
  224,
  -736,
  224,
  4,
  224,
  1002,
  223,
  8,
  223,
  1001,
  224,
  3,
  224,
  1,
  223,
  224,
  223,
  1,
  166,
  195,
  224,
  1001,
  224,
  -137,
  224,
  4,
  224,
  102,
  8,
  223,
  223,
  101,
  5,
  224,
  224,
  1,
  223,
  224,
  223,
  1001,
  169,
  83,
  224,
  1001,
  224,
  -90,
  224,
  4,
  224,
  102,
  8,
  223,
  223,
  1001,
  224,
  2,
  224,
  1,
  224,
  223,
  223,
  101,
  44,
  117,
  224,
  101,
  -131,
  224,
  224,
  4,
  224,
  1002,
  223,
  8,
  223,
  101,
  5,
  224,
  224,
  1,
  224,
  223,
  223,
  1101,
  80,
  17,
  225,
  1101,
  56,
  51,
  225,
  1101,
  78,
  89,
  225,
  1102,
  48,
  16,
  225,
  1101,
  87,
  78,
  225,
  1102,
  34,
  33,
  224,
  101,
  -1122,
  224,
  224,
  4,
  224,
  1002,
  223,
  8,
  223,
  101,
  7,
  224,
  224,
  1,
  223,
  224,
  223,
  1101,
  66,
  53,
  224,
  101,
  -119,
  224,
  224,
  4,
  224,
  102,
  8,
  223,
  223,
  1001,
  224,
  5,
  224,
  1,
  223,
  224,
  223,
  1102,
  51,
  49,
  225,
  1101,
  7,
  15,
  225,
  2,
  110,
  106,
  224,
  1001,
  224,
  -4539,
  224,
  4,
  224,
  102,
  8,
  223,
  223,
  101,
  3,
  224,
  224,
  1,
  223,
  224,
  223,
  1102,
  88,
  78,
  225,
  102,
  78,
  101,
  224,
  101,
  -6240,
  224,
  224,
  4,
  224,
  1002,
  223,
  8,
  223,
  101,
  5,
  224,
  224,
  1,
  224,
  223,
  223,
  4,
  223,
  99,
  0,
  0,
  0,
  677,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  1105,
  0,
  99999,
  1105,
  227,
  247,
  1105,
  1,
  99999,
  1005,
  227,
  99999,
  1005,
  0,
  256,
  1105,
  1,
  99999,
  1106,
  227,
  99999,
  1106,
  0,
  265,
  1105,
  1,
  99999,
  1006,
  0,
  99999,
  1006,
  227,
  274,
  1105,
  1,
  99999,
  1105,
  1,
  280,
  1105,
  1,
  99999,
  1,
  225,
  225,
  225,
  1101,
  294,
  0,
  0,
  105,
  1,
  0,
  1105,
  1,
  99999,
  1106,
  0,
  300,
  1105,
  1,
  99999,
  1,
  225,
  225,
  225,
  1101,
  314,
  0,
  0,
  106,
  0,
  0,
  1105,
  1,
  99999,
  1107,
  226,
  677,
  224,
  102,
  2,
  223,
  223,
  1006,
  224,
  329,
  101,
  1,
  223,
  223,
  1108,
  226,
  677,
  224,
  1002,
  223,
  2,
  223,
  1005,
  224,
  344,
  101,
  1,
  223,
  223,
  8,
  226,
  677,
  224,
  102,
  2,
  223,
  223,
  1006,
  224,
  359,
  1001,
  223,
  1,
  223,
  1007,
  226,
  677,
  224,
  1002,
  223,
  2,
  223,
  1005,
  224,
  374,
  101,
  1,
  223,
  223,
  1008,
  677,
  677,
  224,
  1002,
  223,
  2,
  223,
  1005,
  224,
  389,
  1001,
  223,
  1,
  223,
  1108,
  677,
  226,
  224,
  1002,
  223,
  2,
  223,
  1006,
  224,
  404,
  1001,
  223,
  1,
  223,
  1007,
  226,
  226,
  224,
  1002,
  223,
  2,
  223,
  1005,
  224,
  419,
  1001,
  223,
  1,
  223,
  1107,
  677,
  226,
  224,
  1002,
  223,
  2,
  223,
  1006,
  224,
  434,
  101,
  1,
  223,
  223,
  108,
  677,
  677,
  224,
  1002,
  223,
  2,
  223,
  1005,
  224,
  449,
  1001,
  223,
  1,
  223,
  1107,
  677,
  677,
  224,
  102,
  2,
  223,
  223,
  1005,
  224,
  464,
  1001,
  223,
  1,
  223,
  108,
  226,
  226,
  224,
  1002,
  223,
  2,
  223,
  1006,
  224,
  479,
  1001,
  223,
  1,
  223,
  1008,
  226,
  226,
  224,
  102,
  2,
  223,
  223,
  1005,
  224,
  494,
  101,
  1,
  223,
  223,
  108,
  677,
  226,
  224,
  102,
  2,
  223,
  223,
  1005,
  224,
  509,
  1001,
  223,
  1,
  223,
  8,
  677,
  226,
  224,
  1002,
  223,
  2,
  223,
  1006,
  224,
  524,
  101,
  1,
  223,
  223,
  7,
  226,
  677,
  224,
  1002,
  223,
  2,
  223,
  1006,
  224,
  539,
  101,
  1,
  223,
  223,
  7,
  677,
  226,
  224,
  102,
  2,
  223,
  223,
  1006,
  224,
  554,
  1001,
  223,
  1,
  223,
  7,
  226,
  226,
  224,
  1002,
  223,
  2,
  223,
  1006,
  224,
  569,
  101,
  1,
  223,
  223,
  107,
  677,
  677,
  224,
  102,
  2,
  223,
  223,
  1006,
  224,
  584,
  101,
  1,
  223,
  223,
  1108,
  677,
  677,
  224,
  102,
  2,
  223,
  223,
  1006,
  224,
  599,
  1001,
  223,
  1,
  223,
  1008,
  677,
  226,
  224,
  1002,
  223,
  2,
  223,
  1005,
  224,
  614,
  1001,
  223,
  1,
  223,
  8,
  677,
  677,
  224,
  1002,
  223,
  2,
  223,
  1006,
  224,
  629,
  1001,
  223,
  1,
  223,
  107,
  226,
  677,
  224,
  1002,
  223,
  2,
  223,
  1006,
  224,
  644,
  101,
  1,
  223,
  223,
  1007,
  677,
  677,
  224,
  102,
  2,
  223,
  223,
  1006,
  224,
  659,
  101,
  1,
  223,
  223,
  107,
  226,
  226,
  224,
  1002,
  223,
  2,
  223,
  1006,
  224,
  674,
  1001,
  223,
  1,
  223,
  4,
  223,
  99,
  226,
];

class Interpreter {
  #cursorpos;
  constructor(rawCode) {
    this.instructions = [...rawCode];
  }

  add(a, b) {
    return a + b;
  }
  mul(a, b) {
    return a * b;
  }
  print(val) {
    console.log(val);
  }
  input() {
    return +prompt();
  }

  parseInstruction(instrction) {
    // instruction
    //0 - 0 - 0 -- 00 => resltMode - opt2Mode - opt1Mode -- opcode
    const instrctionStr = instrction.toString().padStart(5);
    const [resltMode, opt2Mode, opt1Mode, opcode] = [
      instrctionStr[0],
      instrctionStr[1],
      instrctionStr[2],
      instrctionStr.slice(3),
    ];

    return [resltMode, opt2Mode, opt1Mode, opcode].map(Number);
  }

  getParms(currentPos, parmsCount) {
    this.#cursorpos += parmsCount + 1;
    if (parmsCount === 3) {
      return [
        this.instructions[currentPos + 1],
        this.instructions[currentPos + 2],
        this.instructions[currentPos + 3],
      ];
    }
    return [this.instructions[currentPos + 1]];
  }

  core() {
    this.#cursorpos = 0;
    while (this.#cursorpos < this.instructions.length) {
      const [resltMode, opt2Mode, opt1Mode, opcode] = this.parseInstruction(
        this.instructions[this.#cursorpos],
      );

      //halt

      if (opcode === 99) {
        console.log("completed");

        break;
      }
      //add

      if (opcode === 1) {
        const optneed = 3;
        const [opt1, opt2, resluaddress] = this.getParms(
          this.#cursorpos,
          optneed,
        );
        let value1 = this.instructions[opt1];
        let value2 = this.instructions[opt2];
        if (Boolean(opt1Mode)) {
          value1 = opt1;
        }
        if (Boolean(opt2Mode)) {
          value2 = opt2;
        }

        this.instructions[resluaddress] = this.add(value1, value2);
      }

      //mul
      if (opcode === 2) {
        const optneed = 3;
        const [opt1, opt2, resluaddress] = this.getParms(
          this.#cursorpos,
          optneed,
        );
        let value1 = this.instructions[opt1];
        let value2 = this.instructions[opt2];
        if (Boolean(opt1Mode)) {
          value1 = opt1;
        }
        if (Boolean(opt2Mode)) {
          value2 = opt2;
        }
        this.instructions[resluaddress] = this.mul(value1, value2);
      }

      //input

      if (opcode === 3) {
        const address = this.instructions[this.#cursorpos + 1];
        this.#cursorpos += 2;
        this.instructions[address] = this.input();
      }
      //print

      if (opcode === 4) {
        const [address] = this.getParms(this.#cursorpos, 1);
        if (!Boolean(opt1Mode)) {
          this.print(this.instructions[address]);
        } else {
          this.print(address);
        }
      }
    }
  }
}

const obj = new Interpreter(input);

obj.core();
